# vim:ft=ansible:
- name: create machine
  hosts: localhost
  gather_facts: no
  tags:
      - consul
      - registrator
      - swarm

  vars:
    domain_name: 'service.consul'
    registrator_tag: 'latest'
    swarm_port: '2375'
    docker_port: '2376'
    consul_port: '8500'
    datacenter_name: 'dc1'
    docker_driver: virtualbox
    external_dns_first: '8.8.8.8'
    external_dns_second: '8.8.4.4'
    consul_virtualbox_memory: '512'
    as_virtualbox_memory: '2048'
    insecure_registry: '52.35.21.153:5000'
    tags:
      - consul
      - registrator
      - swarm

  tasks:
    - shell: "docker-machine ip docksul01"
      register: dockerip_docksul01
      tags:
        - consul
        - registrator
        - swarm

    - shell: "docker-machine ip docksul02"
      register: dockerip_docksul02
      tags:
        - consul
        - registrator
        - swarm

    - shell: "docker-machine ip docksul03"
      register: dockerip_docksul03
      tags:
        - consul
        - registrator
        - swarm

    - set_fact:
        # must make this dynamic !!!
  #      docker_bridge_ip: '172.17.0.1'
        consul_master_ip: "{{ dockerip_docksul01.stdout_lines[0] }}"
        dockerip_docksul01: "{{ dockerip_docksul01.stdout_lines[0] }}"
        dockerip_docksul02: "{{ dockerip_docksul02.stdout_lines[0] }}"
        dockerip_docksul03: "{{ dockerip_docksul03.stdout_lines[0] }}"
        tags:
          - consul
          - registrator
          - swarm

    - name: Create AS swarm cluster manager
      shell: "docker-machine ls | grep {{ item }} || docker-machine create {{ item }} --driver {{ docker_driver }} --swarm --swarm-master --swarm-discovery consul://{{ dockerip_docksul01 }}:{{consul_port}}/swarm --engine-opt dns={{ external_dns_first }} --engine-opt dns={{ external_dns_second }} --virtualbox-memory \"{{ as_virtualbox_memory }}\""
      with_items:
        - "as01"
      tags:
        - swarm
        - swarm-members
        - swarm-manager

    - name: Create AS swarm cluster members
      shell: "docker-machine ls | grep {{ item }} || docker-machine create {{ item }} --driver {{ docker_driver }} --swarm --swarm-discovery consul://{{ dockerip_docksul01 }}:{{consul_port}}/swarm --engine-opt dns={{ external_dns_first }} --engine-opt dns={{ external_dns_second }} --virtualbox-memory \"{{ as_virtualbox_memory }}\""
      with_items:
        - "as02"
        - "as03"
      tags:
        - swarm
        - swarm-members

    - shell: "docker-machine ip as01"
      register: dockerip_as01
      tags:
        - consul
        - registrator
        - swarm

    - shell: "docker-machine ip as02"
      register: dockerip_as02
      tags:
        - consul
        - registrator
        - swarm

    - shell: "docker-machine ip as03"
      register: dockerip_as03
      tags:
        - consul
        - registrator
        - swarm

    - set_fact:
        # must make this dynamic !!!
        dockerip_as01: "{{ dockerip_as01.stdout_lines[0] }}"
        dockerip_as02: "{{ dockerip_as02.stdout_lines[0] }}"
        dockerip_as03: "{{ dockerip_as03.stdout_lines[0] }}"
        swarm_url: "tcp://{{ dockerip_as01.stdout_lines[0] }}:3376"
        swarm_ip: "{{ dockerip_as01.stdout_lines[0] }}"
        tags:
          - consul
          - registrator
          - swarm


    - name: launch registrator container on as01
      docker:
        name: registrator01
        hostname: registrator01
        image: gliderlabs/registrator:{{ registrator_tag }}
        state: started
        use_tls: encrypt
        memory_limit: "128MB"
        docker_url: "tcp://{{ dockerip_as01 }}:{{ docker_port }}"
        volumes: /var/run/docker.sock:/tmp/docker.sock
        restart_policy: always
        dns:
          - "{{ dockerip_docksul03 }}"
          - "{{ external_dns_first }}"
          - "{{ external_dns_second }}"
        command: consul://{{ dockerip_docksul01 }}:{{ consul_port }}
      tags:
        - registrator

    - name: launch registrator container on as02
      docker:
        name: registrator02
        hostname: registrator02
        image: gliderlabs/registrator:{{ registrator_tag }}
        state: started
        use_tls: encrypt
        memory_limit: "128MB"
        docker_url: "tcp://{{ dockerip_as02 }}:{{ docker_port }}"
        volumes: /var/run/docker.sock:/tmp/docker.sock
        restart_policy: always
        dns:
          - "{{ dockerip_docksul03 }}"
          - "{{ external_dns_first }}"
          - "{{ external_dns_second }}"
        command: consul://{{ dockerip_docksul02 }}:{{ consul_port }}
      tags:
        - registrator

    - name: launch registrator container on as03
      docker:
        name: registrator03
        hostname: registrator03
        image: gliderlabs/registrator:{{ registrator_tag }}
        state: started
        use_tls: encrypt
        memory_limit: "128MB"
        docker_url: "tcp://{{ dockerip_as03 }}:{{ docker_port }}"
        volumes: /var/run/docker.sock:/tmp/docker.sock
        restart_policy: always
        dns:
          - "{{ dockerip_docksul03 }}"
          - "{{ external_dns_first }}"
          - "{{ external_dns_second }}"
        command: consul://{{ dockerip_docksul03 }}:{{ consul_port }}
      tags:
        - registrator

    - name: Registrator KV is running on as03
      docker:
        name: registrator-kv
        use_tls: encrypt
        volumes:
          - /var/run/docker.sock:/tmp/docker.sock
        hostname: registrator-kv
        image: gliderlabs/registrator
        docker_url: "tcp://{{ dockerip_as03 }}:{{ docker_port }}"
        command: -ip {{ dockerip_as03 }} consulkv://{{ dockerip_docksul03 }}:{{ consul_port }}
      tags: registrator-kv



#    - name: eval docker-machine env for as01
#      shell: "eval $(docker-machine env as01)"

    - name: launch redis
      docker:
        name: redis
        image: redis
        use_tls: encrypt
#        privileged: True
#        expose: 6379
        ports: "6379:6379"
        memory_limit: "128MB"
        docker_url: "{{ swarm_url }}"
        dns:
          - "{{ dockerip_docksul01 }}"
          - "{{ external_dns_first }}"
          - "{{ external_dns_second }}"
