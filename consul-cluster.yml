# vim:ft=ansible:
- name: create machine
  hosts: localhost
  gather_facts: no
  tags: create


  vars:
    domain_name: 'service.consul'
    registrator_tag: 'v4'
    docker_port: '2376'
    consul_port: '8500'
    datacenter_name: 'dc1'
    docker_driver: virtualbox
    external_dns_first:
  tasks:
#  - docker_machine: name="{{ item }}" state=present driver=virtualbox
#    with_items:
#      - "docksul01"
#      - "docksul02"
#      - "docksul03"

#  - include: tasks/dev.yml
#    when: env == "dev"
#
#  - include: tasks/prod.yml
#    when: env == "prod"


  - shell: "docker-machine ls | grep {{ item }} || docker-machine create {{ item }} --driver {{ docker_driver }} --engine-opt dns=127.0.0.1 --engine-opt dns=8.8.8.8 --engine-opt dns=8.8.4.4"
    with_items:
      - "docksul01"
      - "docksul02"
      - "docksul03"
    when: docker_driver == "virtualbox"

  - shell: "docker-machine ls | grep {{ item }} || docker-machine create {{ item }} --driver {{ docker_driver }}"
    with_items:
      - "docksul01"
      - "docksul02"
      - "docksul03"
    when: docker_driver == "aws"


  - shell: "docker-machine ip docksul01"
    register: dockerip_docksul01
  - shell: "docker-machine ip docksul02"
    register: dockerip_docksul02
  - shell: "docker-machine ip docksul03"
    register: dockerip_docksul03

  - name: eval docker-machine env for docksul01
    shell: "eval $(docker-machine env docksul01)"

  - set_fact:
      # must make this dynamic !!!
      docker_bridge_ip: '172.17.0.1'
      consul_master_ip: "{{ dockerip_docksul01.stdout_lines[0] }}"
      dockerip_docksul01: "{{ dockerip_docksul01.stdout_lines[0] }}"
      dockerip_docksul02: "{{ dockerip_docksul02.stdout_lines[0] }}"
      dockerip_docksul03: "{{ dockerip_docksul03.stdout_lines[0] }}"

  - name: Display all variables/facts known for consul-master
    debug: var=hostvars[inventory_hostname]

  - name: Create consul01 on docksul01
    docker:
      name: consul01
      hostname: consul01
      image: progrium/consul
      state: started
      use_tls: encrypt
      memory_limit: "256MB"
      docker_url: "tcp://{{ dockerip_docksul01 }}:{{ docker_port }}"
      ports:
        - "{{ dockerip_docksul01 }}:8300:8300"
        - "{{ dockerip_docksul01 }}:8301:8301"
        - "{{ dockerip_docksul01 }}:8301:8301/udp"
        - "{{ dockerip_docksul01 }}:8302:8302"
        - "{{ dockerip_docksul01 }}:8302:8302/udp"
        - "{{ dockerip_docksul01 }}:8400:8400"
        - "{{ dockerip_docksul01 }}:{{ consul_port }}:{{ consul_port }}"
        - "{{ dockerip_docksul01 }}:53:53"
        - "{{ dockerip_docksul01 }}:53:53/udp"
      volumes: /mnt:/data
#      restart_policy: always
      domainname: "(( domain_name }"
      dns:
        - "{{ dockerip_docksul01 }}"
        - "8.8.8.8"
        - "8.8.4.4"
#      command: -server -dns {{ dockerip_docksul01 }} -dns 8.8.8.8 -dns 8.8.4.4 -advertise {{ dockerip_docksul01 }} -bootstrap-expect 3
      command: -server -advertise {{ dockerip_docksul01 }} -bootstrap-expect 3

    # create secondaty consul on docksul02
#  - name: eval docker-machine env for docksul02
#    shell: "eval $(docker-machine env docksul02)"
  - name: Create consul02 on docksul02
    docker:
      name: consul02
      hostname: consul02
      image: progrium/consul
      state: started
      use_tls: encrypt
      memory_limit: "128MB"
      docker_url: "tcp://{{ dockerip_docksul02 }}:{{ docker_port }}"
      ports:
        - "{{ dockerip_docksul02 }}:8300:8300"
        - "{{ dockerip_docksul02 }}:8301:8301"
        - "{{ dockerip_docksul02 }}:8301:8301/udp"
        - "{{ dockerip_docksul02 }}:8302:8302"
        - "{{ dockerip_docksul02 }}:8302:8302/udp"
        - "{{ dockerip_docksul02 }}:8400:8400"
        - "{{ dockerip_docksul02 }}:{{ consul_port }}:{{ consul_port }}"
        - "{{ dockerip_docksul02 }}:53:53"
        - "{{ dockerip_docksul02 }}:53:53/udp"
      volumes: /mnt:/data
      restart_policy: always
      domainname: "(( domain_name }"
      dns:
        - "{{ dockerip_docksul02 }}"
        - "8.8.8.8"
        - "8.8.4.4"
      command: -server -advertise {{ dockerip_docksul02 }} -bootstrap-expect 3 -join {{ consul_master_ip }}

  - name: Create consul03 on docksul03
    docker:
      name: consul03
      hostname: consul03
      image: progrium/consul
      state: started
      use_tls: encrypt
      memory_limit: "128MB"
      docker_url: "tcp://{{ dockerip_docksul03 }}:{{ docker_port }}"
      ports:
        - "{{ dockerip_docksul03 }}:8300:8300"
        - "{{ dockerip_docksul03 }}:8301:8301"
        - "{{ dockerip_docksul03 }}:8301:8301/udp"
        - "{{ dockerip_docksul03 }}:8302:8302"
        - "{{ dockerip_docksul03 }}:8302:8302/udp"
        - "{{ dockerip_docksul03 }}:8400:8400"
        - "{{ dockerip_docksul03 }}:{{ consul_port }}:{{ consul_port }}"
        - "{{ dockerip_docksul03 }}:53:53"
        - "{{ dockerip_docksul03 }}:53:53/udp"
      volumes: /mnt:/data
      restart_policy: always
      domainname: "(( domain_name }"
      dns:
        - "{{ dockerip_docksul03 }}"
        - "8.8.8.8"
        - "8.8.4.4"
      command: -server -advertise {{ dockerip_docksul03 }} -bootstrap-expect 3 -join {{ consul_master_ip }}


  - name: eval docker-machine env for docksul01
    shell: "eval $(docker-machine env docksul01)"

#  - name: gen cluster token
#    shell: docker run swarm create
#    register: swarm_token
#  - debug: var=swarm_token.stdout_lines[0]

  - name: launch registrator container on docksoul01
    docker:
      name: registrator
      hostname: registrator
      image: gliderlabs/registrator:{{ registrator_tag }}
      state: started
      use_tls: encrypt
      memory_limit: "128MB"
      docker_url: "tcp://{{ dockerip_docksul01 }}:{{ docker_port }}"
      volumes: /var/run/docker.sock:/tmp/docker.sock
      restart_policy: always
      domainname: "(( domain_name }"
      dns:
        - "{{ dockerip_docksul03 }}"
        - "8.8.8.8"
        - "8.8.4.4"
      command: consul://{{ dockerip_docksul01 }}:{{ consul_port }} -dns {{ dockerip_docksul01 }} -dns 8.8.8.8 -dns 8.8.4.4

  - name: launch registrator container on docksoul02
    docker:
      name: registrator
      hostname: registrator
      image: gliderlabs/registrator:{{ registrator_tag }}
      state: started
      use_tls: encrypt
      memory_limit: "128MB"
      docker_url: "tcp://{{ dockerip_docksul02 }}:{{ docker_port }}"
      volumes: /var/run/docker.sock:/tmp/docker.sock
      restart_policy: always
      domainname: "(( domain_name }"
      dns:
        - "{{ dockerip_docksul03 }}"
        - "8.8.8.8"
        - "8.8.4.4"
      command: consul://{{ dockerip_docksul02 }}:{{ consul_port }} -dns {{ dockerip_docksul02 }}

  - name: launch registrator container on docksoul03
    docker:
      name: registrator
      hostname: registrator
      image: gliderlabs/registrator:{{ registrator_tag }}
      state: started
      use_tls: encrypt
      memory_limit: "128MB"
      docker_url: "tcp://{{ dockerip_docksul03 }}:{{ docker_port }}"
      volumes: /var/run/docker.sock:/tmp/docker.sock
      restart_policy: always
      domainname: "(( domain_name }"
      dns:
        - "{{ dockerip_docksul03 }}"
        - "8.8.8.8"
        - "8.8.4.4"
      command: consul://{{ dockerip_docksul03 }}:{{ consul_port }} -dns {{ dockerip_docksul03 }}

  - docker:
      name: swarm01
      hostname: swarm01
      image: swarm:latest
      state: started
      use_tls: encrypt
#      memory_limit: "128M"
      dns: "{{ dockerip_docksul01 }}"
      docker_url: "tcp://{{ dockerip_docksul01 }}:{{ docker_port }}"
      command: consul://{{ consul_master_ip }}:{{ consul_port }}/{{ datacenter_name }} -
      dns:
        - "{{ dockerip_docksul01 }}"
        - "8.8.8.8"
        - "8.8.4.4"

#  - name: start swarm01
#    docker:
#      name: swarm01
#      hostname: swarm01
#      dns: "{{ docker_bridge_ip }}"
#      domainname: service.consul
#      image: swarm:latest
#      state: started
#      use_tls: encrypt
##      memory_limit: "128M"
#      ports: "2375:2375"
#      docker_url: "tcp://{{ dockerip_docksul01 }}:{{ docker_port }}"
#      command: swarm manage consul://{{ consul_master_ip }}:{{ consul_port }}/{{ datacenter_name }} --advertise={{ dockerip_docksul01 }}:{{ docker_port }}
#
#  - name: start swarm02
#    docker:
#      name: swarm02
#      hostname: swarm02
#      dns: "{{ docker_bridge_ip }}"
#      domainname: service.consul
#      image: swarm:latest
#      state: started
#      use_tls: encrypt
##      dns: "{{ consul_master_ip }}"
##      memory_limit: "128M"
#      docker_url: "tcp://{{ dockerip_docksul02 }}:{{ docker_port }}"
#      command: consul://{{ consul_master_ip }}:{{ consul_port }}/{{ datacenter_name }} --advertise={{ dockerip_docksul02 }}:{{ docker_port }}
#
#  - docker:
#      name: swarm03
#      hostname: swarm03
#      dns: "{{ consul_master_ip }}"
#      domainname: service.consul
#      image: swarm:latest
#      state: started
#      use_tls: encrypt
##      dns: "{{ consul_master_ip }}"
##      memory_limit: "128M"
#      docker_url: "tcp://{{ dockerip_docksul03 }}:{{ docker_port }}"
#      command: consul://{{ consul_master_ip }}:{{ consul_port }}/{{ datacenter_name }} --advertise={{ dockerip_docksul03 }}:{{ docker_port }}
#  - name: Display docker_bridge_ip
#    debug: var=docker_bridge_ip
#
#  - docker:
#      name: jenkins
#      hostname: jenkins
#      domainname: service.consul
#      image: jenkins:latest
#      state: started
#      use_tls: encrypt
#      memory_limit: "256MB"
#      dns: "{{ docker_bridge_ip }}"
#      ports: "8080:8080"
##      command: --dns "{{ docker_bridge_ip }}"
#      docker_url: "tcp://{{ dockerip_docksul02 }}:{{ docker_port }}"
#      command: consul://{{ consul_master_ip }}:{{ consul_port }}/{{ datacenter_name }}


#  - docker:
#      name: dnsutils
#      hostname: dnsutils
#      image: docker-dnsutils
#      state: started
#      use_tls: encrypt
#      memory_limit: "64MB"
#      docker_url: "tcp://{{ dockerip_docksul02 }}:{{ docker_port }}"
